// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using hub.dbMigration.dbContext;

#nullable disable

namespace hub.dbMigration.Migrations
{
    [DbContext(typeof(HubDbContext))]
    [Migration("20250110055746_redo migration after upgrade to 8.0")]
    partial class redomigrationafterupgradeto80
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("hub.domain.model.directory.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("hub.domain.model.directory.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<DateTime>("AccountCreated")
                        .HasColumnType("DateTime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Extension")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("DateTime2");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("NickName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PrimaryManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EmployeeId");

                    b.HasAlternateKey("Email");

                    b.HasAlternateKey("Username");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PrimaryManagerId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("hub.domain.model.directory.FaxNumber", b =>
                {
                    b.Property<int>("FaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FaxId"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FaxName")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("FaxId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LocationId");

                    b.ToTable("FaxNumbers");
                });

            modelBuilder.Entity("hub.domain.model.directory.JobTitle", b =>
                {
                    b.Property<int>("JobTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobTitleId"));

                    b.Property<string>("JobTitleName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("JobTitleId");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("hub.domain.model.directory.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("hub.domain.model.directory.Employee", b =>
                {
                    b.HasOne("hub.domain.model.directory.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("hub.domain.model.directory.JobTitle", "JobTitle")
                        .WithMany("Employees")
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("hub.domain.model.directory.Location", "Location")
                        .WithMany("Employees")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("hub.domain.model.directory.Employee", "PrimaryManager")
                        .WithMany("PrimaryStaff")
                        .HasForeignKey("PrimaryManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");

                    b.Navigation("JobTitle");

                    b.Navigation("Location");

                    b.Navigation("PrimaryManager");
                });

            modelBuilder.Entity("hub.domain.model.directory.FaxNumber", b =>
                {
                    b.HasOne("hub.domain.model.directory.Department", "Department")
                        .WithMany("FaxNumbers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("hub.domain.model.directory.Location", "Location")
                        .WithMany("FaxNumbers")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("hub.domain.model.directory.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("FaxNumbers");
                });

            modelBuilder.Entity("hub.domain.model.directory.Employee", b =>
                {
                    b.Navigation("PrimaryStaff");
                });

            modelBuilder.Entity("hub.domain.model.directory.JobTitle", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("hub.domain.model.directory.Location", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("FaxNumbers");
                });
#pragma warning restore 612, 618
        }
    }
}
